angular.module("RDash",["ui.bootstrap","ui.router","ngCookies"]);
"use strict";angular.module("RDash")
    .config(["$stateProvider","$urlRouterProvider",
        function(t,e){e.otherwise("/"),
            t.state("index",{url:"/",templateUrl:"templates/dashboard.html"})
                .state("tables",{url:"/load",templateUrl:"templates/load.html"})
                .state("calendar",{url:"/calendar",templateUrl:"templates/calendar.html"})
        }]);

function rdLoading(){
    var d;
    d = {
        restrict: "AE",
        template: '<div class="loading"><div class="double-bounce1"></div><div class="double-bounce2"></div></div>'
    };return d}angular.module("RDash").directive("rdLoading",rdLoading);

function rdWidgetBody(){
    var d={requires:"^rdWidget",scope:{loading:"@?",classes:"@?"},transclude:!0,template:'<div class="widget-body" ng-class="classes"><rd-loading ng-show="loading"></rd-loading><div ng-hide="loading" class="widget-content" ng-transclude></div></div>',restrict:"E"};return d}angular.module("RDash").directive("rdWidgetBody",rdWidgetBody);

function rdWidgetFooter(){
    var e={requires:"^rdWidget",transclude:!0,template:'<div class="widget-footer" ng-transclude></div>',restrict:"E"};return e}angular.module("RDash").directive("rdWidgetFooter",rdWidgetFooter);

function rdWidgetTitle(){
    var e;
    e = {
        requires: "^rdWidget",
        scope: {title: "@", icon: "@"},
        transclude: !0,
        template: '<div class="widget-header"><i class="fa" ng-class="icon"></i> {{title}} <div class="pull-right" ng-transclude></div></div>',
        restrict: "E"
    };return e}angular.module("RDash").directive("rdWidgetHeader",rdWidgetTitle);

function rdWidget(){
    var d;
    d = {transclude: !0, template: '<div class="widget" ng-transclude></div>', restrict: "EA"};return d}angular.module("RDash").directive("rdWidget",rdWidget);

function AlertsCtrl(e){
    e.alerts=[
        {type:"success",
            msg:"Thanks for visiting! Feel free to create pull requests to improve the dashboard!"
        }
    ],
        e.addAlert=function(){
            e.alerts.push({msg:"Another alert!"})
        },
        e.closeAlert=function(t){
            e.alerts.splice(t,1)
        },
        e.newAlert=function(type,msg){
            e.alerts.push({type:type, msg:msg});
        }
}angular.module("RDash").controller("AlertsCtrl",["$scope",AlertsCtrl]);

function MasterCtrl(t,e){
    var o;
    o = 992;
    t.getWidth=function(){
        return window.innerWidth
    },
        t.$watch(t.getWidth,function(g){
            t.toggle=g>=o?angular.isDefined(e.get("toggle"))?e.get("toggle")?!0:!1:!0:!1}),t.toggleSidebar=function(){t.toggle=!t.toggle,e.put("toggle",t.toggle)
    },
        window.onresize=function(){
        t.$apply()
        }
}angular.module("RDash").controller("MasterCtrl",["$scope","$cookieStore",MasterCtrl]);

angular.module("RDash").controller("LoadDashBoard",
    function LoadDashBoard($scope,$rootScope,$http,$location) {

        $rootScope.apiUrl = "http://localhost:5000/";
        $scope.messages = {"GithubByUser":"Enter the USERNAME only"};
        // ng-pattern regex matcher
        $scope.pattern = {};
        $scope.pattern.repository= /^([\w]+)\/([\w]+)$/i;
        $scope.pattern.email = /^([\w-]+(?:\.[\w-]+)*)@((?:[\w-]+\.)*\w[\w-]{0,66})\.([a-z]{2,6}(?:\.[a-z]{2})?)$/i;
        $scope.pattern.username = /^([\w]+)$/i;

        $scope.showerror = true;
        $scope.msg = "";
        $scope.errorMsg = "";
        $scope.github_by_user = [{"id":1,"data":""}];
        $scope.github_by_repo = [{"id":1,"data":""}];
        $scope.bitbucket = [{"id":1,"data":""}];
        $scope.bugzilla = [{"id":1,"data":""}];
        $scope.udd = [{"id":1,"data":""}];
        $scope.ubuntu = false;
        $scope.debian = false;
        $scope.direct = "";
        $scope.rss = "";
        $scope.verifySpin = "fa fa-refresh";


        $scope.addGithubByUser = function() {
            var newItemNo = $scope.github_by_user.length+1;
            $scope.github_by_user.push({'id':newItemNo});
        };

        $scope.removeGithubByUser = function() {
            var lastItem = $scope.github_by_user.length-1;
            $scope.github_by_user.splice(lastItem);
        };

        $scope.addGithubByRepo = function() {
            var newItemNo = $scope.github_by_repo.length+1;
            $scope.github_by_repo.push({'id':newItemNo});
        };

        $scope.removeGithubByRepo = function() {
            var lastItem = $scope.github_by_repo.length-1;
            $scope.github_by_repo.splice(lastItem);
        };

        $scope.addBitbucket = function() {
            var newItemNo = $scope.bitbucket.length+1;
            $scope.bitbucket.push({'id':newItemNo});
        };

        $scope.removeBitbucket = function() {
            var lastItem = $scope.bitbucket.length-1;
            $scope.bitbucket.splice(lastItem);
        };

        $scope.addBugzilla = function() {
            var newItemNo = $scope.bugzilla.length+1;
            $scope.bugzilla.push({'id':newItemNo});
        };

        $scope.removeBugzilla = function() {
            var lastItem = $scope.bugzilla.length-1;
            $scope.bugzilla.splice(lastItem);
        };

        $scope.addUdd = function() {
            var newItemNo = $scope.udd.length+1;
            $scope.udd.push({'id':newItemNo});
        };

        $scope.removeUdd = function() {
            var lastItem = $scope.udd.length-1;
            $scope.udd.splice(lastItem);
        };

        $scope.updateUbuntu = function(){
            $scope.ubuntu = !$scope.ubuntu;
            //alert($scope.ubuntu);

        };
        $scope.updateDebian = function(){
            $scope.debian = !$scope.debian;

            //alert($scope.debian);
        };

        $scope.merge = function(){

            alert($scope.rss);
        };

        $scope.toogleSpin = function(){
            if($scope.verifySpin == "fa fa-spin fa-spinner"){

                $scope.verifySpin = "fa fa-refresh";
            }
            else {
                $scope.verifySpin = "fa fa-spin fa-spinner"
            }
        };

        //$scope.data = Formatted data expected by API

        $scope.reFormatData = function(){
            $scope.data = {};

            if($scope.github_by_user.length > 0){
                $scope.data['github_by_user'] = []
                for(var i in $scope.github_by_user){
                    if($scope.github_by_user[i].data) {
                        $scope.data['github_by_user'].push($scope.github_by_user[i].data);
                    }
                }
            }

            if($scope.github_by_repo.length > 0){
                $scope.data['github_by_repo'] = []
                for(var i in $scope.github_by_repo){
                    if($scope.github_by_repo[i].data) {
                   $scope.data['github_by_repo'].push($scope.github_by_repo[i].data);
                    }
                }
            }

            if($scope.bugzilla.length > 0){
                $scope.data['bugzilla'] = []
                for(var i in $scope.bugzilla){
                        if($scope.bugzilla[i].data) {
                            $scope.data['bugzilla'].push($scope.bugzilla[i].data);
                        }
                }
            }

            if($scope.bitbucket.length > 0){
                $scope.data['bitbucket'] = []
                for(var i in $scope.bitbucket){
                    if($scope.bitbucket[i].data) {
                        $scope.data['bitbucket'].push($scope.bitbucket[i].data);
                    }
                }
            }

            if($scope.udd.length > 0){
                $scope.data['udd'] = []
                for(var i in $scope.udd){
                    if($scope.udd[i].data){
                        $scope.data['udd'].push($scope.udd[i].data);
                    }
                }
            }

            if($scope.direct.length > 0){
                $scope.data['direct'] = $scope.direct;
            }

            if($scope.ubuntu){
                $scope.data['ubuntu_events'] = "True";
            }

            if($scope.debian){
                $scope.data['deb_summit'] = "True";
            }

        };

        // shortURL Options and variables
        $scope.showShortURL = false;
        $scope.sessionUrl = "";
        $scope.shortenedUrl = "";
        $scope.session_id = "";

        $scope.shortenURL = function(){
            $scope.toogleSpin();
            var url = $rootScope.apiUrl + "shorten";

            $http.post(url, {"url" : $scope.sessionUrl} )
            .success(function(response){
                $scope.shortenedUrl = response.Url;
                    $scope.toogleSpin();

                })
            .error(function(response){
                $scope.loading = false;
                $scope.loadError(response.Message);
                    $scope.toogleSpin();

        });

        };

        $scope.saveSessionApi = function(){
            $scope.toogleSpin();
            $scope.reFormatData();
            $scope.data['do_save'] = "True";
            //console.log($scope.data);
            $scope.showShortURL = true;

            var url = $rootScope.apiUrl+  "add"

        $http.post(url, $scope.data)
            .success(function(response){
                    $scope.showShortURL = true;
                    $scope.session_id = response.Session_id;
                    $scope.sessionUrl = $rootScope.apiUrl+"index.html#/load?id="+response.Session_id;
                    $scope.toogleSpin();

        })
            .error(function(response){
                $scope.loading = false;
                $scope.loadError(response.Message);
                    $scope.toogleSpin();

        });

        };

        $scope.DownloadIcalApi = function(){
            $scope.toogleSpin();
            $scope.reFormatData();
            var url = $rootScope.apiUrl+  "add"
            //add button
            $http.post(url, $scope.data)
            .success(function(response){
                alert($scope.rss);
			var blob = new Blob([response], { type:"text/html" });
			var downloadLink = angular.element('<a></a>');
                        downloadLink.attr('href',window.URL.createObjectURL(blob));
                        downloadLink.attr('download', 'calendar.ical');
			downloadLink[0].click()
                    $scope.toogleSpin();

        })
            .error(function(response){
                $scope.loading = false;
                $scope.loadError(response.Message);
                    $scope.toogleSpin();

        });

        };

    });

angular.module("RDash").controller("LoadSession",
function LoadSession($scope,$rootScope,$http,$location,$window){
    $rootScope.apiUrl = "http://localhost:5000/";
    $scope.showLoadSession=true;
    $scope.showLoadedSession=false;
    $scope.sid;
    $scope.loading=false;
    $scope.resp = {};
    $scope.show = {};

    $scope.removeError = function(){
        $scope.showerror = false;
        $scope.errorMsg = "";
    };

    $scope.loadError = function(msg){
        $scope.showerror = true;
        $scope.errorMsg = msg;
    };

    $scope.go = function(){
        session_id = $scope.sid;
        if(session_id){
            $scope.loading=true;
            $scope.showLoadedSession = false;
            $scope.showLoadSession = false;
            $scope.fetchJson();
            $scope.removeError();
        }
        else{
            $scope.loadError("Enter Valid Session ID");
        }

    };

    $scope.clear = function(){
        $scope.sid = "";
        $scope.showLoadedSession = false;
        $scope.showLoadSession = true;

    };

    $scope.parseJsonData = function(response){
        for (var key in response) {
          if (response.hasOwnProperty(key)) {
              if(response[key]){
                  $scope.resp[key] = response[key];
                  $scope.show[key] = false;
              }
              else{
                  //creates probelm in direct.url when its original value is false.
                  $scope.resp[key] = [""];
                  $scope.show[key] = true;
              }
          }
        }
        if(response.deb_summit){
            $scope.show.deb_summit_accept = true;
            $scope.show.deb_summit_reject = !$scope.show.deb_summit_accept;
        }
        else{
            $scope.show.deb_summit_accept = false;
            $scope.show.deb_summit_reject = !$scope.show.deb_summit_accept;
        }

        if(response.ubuntu_events){
            $scope.show.ubuntu_events_accept = true;
            $scope.show.ubuntu_events_reject = !$scope.show.ubuntu_events_accept;
        }
        else{
            $scope.show.ubuntu_events_accept = false;
            $scope.show.ubuntu_events_reject = !$scope.show.ubuntu_events_accept;
        }
    //console.log($scope.show);

    }

    //table index
    $scope.tableID = 0;
    $scope.fetch_tableID = function(){
        $scope.tableID = $scope.tableID + 1;
        return $scope.tableID;

    };


    $scope.fetchJson = function(){
        $http.get($rootScope.apiUrl+"get/"+$scope.sid)
            .success(function(response){
                $scope.parseJsonData(response);
                $scope.loading = false;
                $scope.showLoadSession = true;
                $scope.showLoadedSession = true;

            })
            .error(function(response){
                $scope.loading = false;
                $scope.showLoadSession = true;
                $scope.loadError(response.Message);

            });
    };
    $scope.removeError();

    var session_id = $location.search().id;

    if(session_id){
        $scope.sid = session_id;
        $scope.go();
    };

    //Button animation
    $scope.exportJsonAnime = "fa fa-refresh";
    $scope.exportICALAnime = "fa fa-refresh";

    $scope.toogleJSONAnime = function(){
        if($scope.exportJsonAnime == "fa fa-refresh"){
            $scope.exportJsonAnime = "fa fa-spin fa-spinner";
        }
        else{
            $scope.exportJsonAnime = "fa fa-refresh";
        }

    };

    $scope.toogleICALAnime = function(){
        if($scope.exportICALAnime == "fa fa-refresh"){
            $scope.exportICALAnime = "fa fa-spin fa-spinner";
        }
        else{
            $scope.exportICALAnime = "fa fa-refresh";
        }

    };

    $scope.saveJSON = function () {
            $scope.toogleJSONAnime();
            $scope.toJSON = '';
			$scope.toJSON = angular.toJson($scope.resp, true);
			var blob = new Blob([$scope.toJSON], { type:"application/json;charset=utf-8;" });
			var downloadLink = angular.element('<a></a>');
                        downloadLink.attr('href',window.URL.createObjectURL(blob));
                        downloadLink.attr('download', 'fileName.json');
			downloadLink[0].click();
            setTimeout($scope.toogleJSONAnime, 1000);

		};

    $scope.saveiCal = function(){
        $scope.toogleICALAnime();

        var url = $rootScope.apiUrl+"download/"+$scope.sid;

        $http.get(url)
            .success(function(responsse){
			var blob = new Blob([responsse], { type:"text/html" });
			var downloadLink = angular.element('<a></a>');
                        downloadLink.attr('href',window.URL.createObjectURL(blob));
                        downloadLink.attr('download', 'calendar.ical');
			downloadLink[0].click()
            $scope.toogleICALAnime();
        })
            .error(function(response){
                $scope.loading = false;
                $scope.showLoadSession = true;
                $scope.loadError(response.Message);
                $scope.toogleICALAnime();

        });


    };

});

angular.module("RDash").controller("LoadCalendar",
function LoadCalendar($scope,$rootScope,$http,$location,$sce){

    $rootScope.apiUrl = "http://localhost:5000/";
    $scope.sid;
    $scope.loading=false;
    $scope.icalURL = "";
    $scope.showCalendar =false;
    $scope.showerror = false;
    $scope.errorMsg = "";


    $scope.removeError = function(){
        $scope.showerror = false;
        $scope.errorMsg = "";
    };

    $scope.loadError = function(msg){
        $scope.showerror = true;
        $scope.errorMsg = msg;
    };


    $scope.check_sid = function(){
        $http.get($rootScope.apiUrl+"get/"+$scope.sid)
            .success(function(response){

                $scope.showCalendar = true;
                $scope.removeError()
                $scope.icalURL = $rootScope.apiUrl+"download/"+$scope.sid;
                var iframe_html_code = "<iframe id='cv_if5' src='http://cdn.instantcal.com/cvir.html?id=cv_nav5&file="+ $scope.icalURL + "&theme=XBL&ccolor=%23ffffc0&dims=1&gtype=cv_monthgrid&gcloseable=0&gnavigable=1&gperiod=month&itype=cv_simpleevent' allowTransparency=true scrolling='no' frameborder=0 height=600 width=800></iframe>";
                //Angular JS has trust issues, workaroud is to use $scr and trust our html code
                //console.log(iframe_html_code);
                $scope.instaCaliFrame = $sce.trustAsHtml(iframe_html_code);

            })
            .error(function(response){
                $scope.loadError(response.Message);
                $scope.showCalendar = false;

            });
    };


    $scope.getCalendarUrl = function(){
        $scope.check_sid();

    };

    $scope.go = function(){
        if($scope.sid) {
            $scope.loading = true;
            $scope.getCalendarUrl();
            $scope.loading = false;

        }
      else{
            $scope.loadError("Enter Valid Session ID");
        }

    };

    $scope.clear = function(){
        $scope.sid = "";
        $scope.loading = false;
        $scope.showCalendar = false;
        $scope.removeError();

    };


    var session_id = $location.search().id;

    if(session_id){
        $scope.sid = session_id;
        $scope.go();
    };


});

